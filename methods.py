import inspect
import os

import allure
from pytest_check import check



class Improve:
    @staticmethod
    def get_test_call_site():
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤—ã–∑–æ–≤–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ–∞–π–ª–∞:–Ω–æ–º–µ—Ä_—Å—Ç—Ä–æ–∫–∏' –∏–ª–∏ '—Å—Ç—Ä–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'.
        """
        stack = inspect.stack()
        for frame in stack:
            filepath = frame.filename.lower()
            # –ò—â–µ–º —Ñ—Ä–µ–π–º, –ø—É—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç 'tests' (–º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
            if "tests" in filepath:
                filename = os.path.basename(frame.filename)
                return f"{filename}:{frame.lineno}"
        return "‚ùå —Å—Ç—Ä–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"


    def check_equal_with_line(self, actual, expected, note=""):
        """
        üîé –î–æ–±–∞–≤–ª—è–µ—Ç —à–∞–≥ –≤ Allure:
         ‚Äî –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∫–ª—é—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏;
        ‚Äî –ø—Ä–∏ —É—Å–ø–µ—Ö–µ ‚Äî —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é –æ—Ç–º–µ—Ç–∫—É.
        """

        call_site = self.get_test_call_site()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–æ –≤—ã–∑–æ–≤–∞ check.equal
        if actual != expected:
            msg = f"{note} üìç ({call_site})"
            with allure.step(f"‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è <{expected}>, –ø–æ–ª—É—á–µ–Ω–æ <{actual}> ‚Äî {msg}"):
                print(f"‚ùå {msg}: –æ–∂–∏–¥–∞–µ—Ç—Å—è <{expected}>, –ø–æ–ª—É—á–µ–Ω–æ <{actual}>")
        else:
            msg = f"{note}"
            with allure.step(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ <{actual}> ‚Äî {msg}"):
                ...
        check.equal(actual, expected, msg=msg)